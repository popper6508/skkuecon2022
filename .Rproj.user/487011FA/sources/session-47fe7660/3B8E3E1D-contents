setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setlocale()

con <- odbcConnect("rfortraders")

a1 <- "OptionsData"
a2 <- "ATMVolatilities"
a3 <- "SPY"
a4 <- paste0("SELECT Symbol, Date, Maturity, Delta, CallPut, ImpliedVoltility FROME ",
             a1, ".", a2, " WHERE Maturity = 91 AND Symbol IN ('",
             a3,"');")

iv <- sqlQuery(con, a4)

con <- dbConnect(MySQL(), user="your_login", password = "you_password",
                 dbname="OptionData", host="location_of_database")
dbListTables(con)

#_____________________

getSymbols("005930.KQ", auto.assign = FALSE, src = "yahoo")
chartSeries(AAPL, theme = chartTheme('white'),
            TA="addVo(); addBBands()")

getSymbols("005930.KS")
getSymbols("299900.KQ")



getSymbols("SPY")

prices <- SPY$SPY.Adjusted
prices['2013::']
mean_price <- round(mean(prices),2)
sd_price <- round(sd(prices),2)

hist(prices, breaks = 100, prob=T, cex.main = 0.9)


test <- ur.kpss(as.numeric(prices))

test@teststat

pepsi <- getSymbols('PEP', from = '2013-01-01', to = '2014-01-01', adjust = T, auto.assign = FALSE)
coke <- getSymbols('COKE', from = '2013-01-01', to = '2014-01-01', adjust = T, auto.assign = FALSE)

prices <- cbind(pepsi[,6],coke[,6])
price_changes <- apply(prices, 2, diff)

plot(price_changes[,1], price_changes[,2])


calculate_spread <- function(x,y,beta) {
  return(y-beta*x)
}

calculate_beta_and_level <- function(x,y,start_date, end_date) {
  require(xts)
  time_range <- paste(start_date, "::",end_date,sep="")
  x <- x[time_range]
  y <- y[time_range]
  
  dx <- diff(x[time_range])
  dy <- diff(y[time_range])
  r <- prcomp(~dx+dy)
  
  beta <- r$rotation[2,1] /r$rotation[1,1]
  spread <- calculate_spread(x,y,beta)
  names(spread) <- "spread"
  
  outL <- list()
  outL$spread <- spread
  outL$beta <- beta
  outL$level <- level
  return(outL)
}

calculate_buy_and_sell_signals <- function(spread, beta, level, lower_threshold, upper_threshold) {
  buy_signals <- ifelse(spread <= level - lower_threshold,1,0)
  sell_signals <- ifelse(spread <= level + upper_threshold,1,0)
  
  output <- cbind(spread, buy_signals, sell_signals)
  colnames(output) <- c("spread", "buy_signals", "sell_signals")
  
  return(output)
}


#_____________________

as.character(today(tzone=""))


#_____________________
App_key = "PSMvOGckKA9dUeBtfTdBGXKqbNws15AJqGKD"

App_Secret = "VQ0pW0jyZbtu+dAN5Twtp9oBN1kdDLMorhslWP6cDvetm6SDHFtnllWt94dlwO1ppdKTDS0on7ZIFJBNXApKr18LkZhdAVttBy//jlbycCEQE8QmigKe5tTb7HiFi3H5vdxnPmOTd3y2Vk0ybzbqLgezYAOllHFUIznv24pxOoON3pJaFOs="

url_base = "https://openapi.koreainvestment.com:9443"


hashkey <- function() {
  
  KIS_hash <- POST(url = paste0(url_base, "/uapi/hashkey"), 
                 body = toJSON(list("CANO" = "63561815", "ACTN_PRDP_CD" = "21", "OVRS_EXCG_CD" = "SHAA"), auto_unbox = TRUE),
                 add_headers(.headers = c('content-Type' = 'application_json','appKey' = App_key, 'appSecret' = App_Secret)))
  hashkey = KIS_hash %>% read_html() %>% html_text() %>% fromJSON() %>% .$HASH
  return(hashkey)
}

KIS_hash <- POST(url = paste0(url_base, "/uapi/hashkey"), 
                 body = toJSON(list("CANO" = "63561815", "ACTN_PRDP_CD" = "21", "OVRS_EXCG_CD" = "SHAA"), auto_unbox = TRUE),
                 add_headers(.headers = c('content-Type' = 'application_json','appKey' = App_key, 'appSecret' = App_Secret)))
hashkey = KIS_hash %>% read_html() %>% html_text() %>% fromJSON() %>% .$HASH

accesskey <- function() {
  
  KIS_key <- POST(url = paste0(url_base,"/oauth2/tokenP"),
                body = paste0('{"grant_type" : "client_credentials","appkey" : "', App_key,'", "appsecret" : "', App_Secret, '"}'))

  accesskey = KIS_key %>% read_html() %>% html_text() %>% fromJSON() %>% .$access_token
  return(accesskey)
}


KIS_key <- POST(url = paste0(url_base,"/oauth2/tokenP"),
                body = paste0('{"grant_type" : "client_credentials","appkey" : "', App_key,'", "appsecret" : "', App_Secret, '"}'))
access_key = KIS_key %>% read_html() %>% html_text() %>% fromJSON() %>% .$access_token

### 가격 데이터 누적

price_data_rec <- list()

codes <- upm_sector_codes[[1]]$종목코드


for (i in codes) {

url_1 <- paste0("https://finance.naver.com/item/frgn.naver?code=", i)

last_page <- GET(url_1,user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36')) %>%
  read_html(., encoding = 'EUC-KR') %>%
  html_nodes(xpath ='//*[@id="content"]/div[2]/table[2]/tr/td[12]/a') %>%
  html_attr(., 'href') %>%
  strsplit(., '=') %>%
  unlist() %>%
  tail(.,1) %>%
  as.numeric()

for (j in 1:last_page) {
url_price <- paste0("https://finance.naver.com/item/frgn.naver?code=", i, "&page=", j)

price_data_prac <- GET(url_price, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))

price_data_p <- price_data_prac %>% read_html(encoding = 'EUC-KR') %>%
  html_table() %>%
  .[[3]] %>%
  as.data.frame() %>%
  .[c(3:7,11:15,19:23,27:31),]

price_data_p[,9] <- as.numeric(str_replace_all(price_data_p[,9], "%",""))
price_data_p[,2] <- as.numeric(str_replace_all(price_data_p[,2], ",",""))
price_data_p[,8] <- as.numeric(str_replace_all(price_data_p[,8], ",",""))

options("scipen" = 100)

cap <- (100/price_data_p[,9]) * price_data_p[,2] * price_data_p[,8]


pricee__1 <- as.data.frame(cbind("일자" = price_data_p$날짜,"종가" = price_data_p$종가,"시가총액" = as.numeric(cap)))
pricee[[j]] <- pricee__1

}

pricee <- as.data.frame(rbindlist(pricee))

price_data_rec[[KOR_corlist[KOR_corlist$종목코드==i,1]]] <- pricee

pricee <- list()

Sys.sleep(.1)
}




####____________

sector_updown <- c()

for (k in 1:length(upm_sector_codes)) {
codes <- upm_sector_codes[[k]]$종목코드
pricee_e <- list()

for (j in codes) {
  url_price_e <- paste0("https://finance.naver.com/item/frgn.naver?code=", j, "&page=1")
  
  price_data_prac_e <- GET(url_price_e, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))
  
  price_data_p_e <- price_data_prac_e %>% read_html(encoding = 'EUC-KR') %>%
    html_table() %>%
    .[[3]] %>%
    as.data.frame() %>%
    .[c(3:7,11:15,19:23,27:31),]
  
  price_data_p_e[,9] <- as.numeric(str_replace_all(price_data_p_e[,9], "%",""))
  price_data_p_e[,2] <- as.numeric(str_replace_all(price_data_p_e[,2], ",",""))
  price_data_p_e[,8] <- as.numeric(str_replace_all(price_data_p_e[,8], ",",""))
  
  options("scipen" = 100)
  
  cap_e <- (100/price_data_p_e[,9]) * price_data_p_e[,2] * price_data_p_e[,8]
  
  
  pricee__1_e <- as.data.frame(cbind("일자" = price_data_p_e$날짜,"종가" = price_data_p_e$종가,"시가총액" = as.numeric(cap_e)))
  pricee_e[[j]] <- pricee__1_e
  
}

ra__ <- rep(0, 20)

ra_today <- c()
i=0

for(j in codes) {
  price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
                    query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
                    add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
  
  pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
  pt1 <- t(pt1)
  pt1 <- as.data.frame(pt1)
  
  ra_today[i] <- pt1$hts_avls
  
  i <- i+1
}

ra_today <- sum(as.numeric(ra_today))


for (i in 1:length(pricee_e)) {
  ra__ <- ra__ + as.numeric(pricee_e[[i]]$시가총액)
  ra__ <- cbind("지수화" = ra__)
  ra__ <- as.data.frame(ra__)
  row.names(ra__) <- pricee_e[[i]]$일자}

ra__ <- rbind("Present Index" = ra_today, ra__)
ra__ra <- (ra__[1,1]*(10^8) - ra__[2,1])/ra__[2,1]
sector_updown[k] <- ra__ra

}

updown <- as.data.frame(cbind(Sector = names(upm_sector_codes)[1:8], UpDown = sector_updown))
updown$UpDown <- as.numeric(updown$UpDown)

ggplot(data=updown) +
  geom_bar(aes(x=Sector,y=UpDown), stat = 'identity') +
  xlab("") +
  ylab("")
