install.packages("rvest")
install.packages("readr")
install.packages("xts")
install.packages("lubridate")
install.packages('timetk')
install.packages("gridExtra")
install.packages("dygraphs")

library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)

setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setlocale()

#___#현 시점 종목 정보 가져오기
i <- 0
ticker <- list()
url3 <- paste0('https://finance.naver.com/sise/', 'sise_market_sum.nhn?sosok=', i, '&page=1')
down_table = GET(url3)
ti_fi <- read_html(down_table, encoding = 'EUC-KR') %>%
  html_nodes(.,'.pgRR') %>%
  html_nodes(.,'a') %>%
  html_attr(.,'href')

ti_fi <- ti_fi %>%
  strsplit(.,'=') %>%
  unlist() %>%
  tail(.,1) %>%
  as.numeric()

#현 시점 종목 정보 가져오기
kodurl_raw <- 'https://finance.naver.com/sise/sise_market_sum.nhn?sosok=1&page=1'
raw_down <- GET(kodurl_raw)

kopurl_raw <- 'https://finance.naver.com/sise/sise_market_sum.nhn?sosok=0&page=1'
raw_down2 <- GET(kopurl_raw)

#끝 페이지 가져오기
data_raw <- read_html(raw_down, encoding = 'EUC-KR') %>%
  html_nodes(., '.pgRR') %>%
  html_nodes(., 'a') %>%
  html_attr(., 'href')

data_raw <- data_raw %>%
  strsplit(., '=') %>%
  unlist() %>%
  tail(.,1) %>%
  as.numeric()

data_raw2 <- read_html(raw_down2, encoding = 'EUC-KR') %>%
  html_nodes(., '.pgRR') %>%
  html_nodes(., 'a') %>%
  html_attr(., 'href')

data_raw2 <- data_raw2 %>%
  strsplit(., '=') %>%
  unlist() %>%
  tail(.,1) %>%
  as.numeric()

#종목별 시세 리스트 가져오기
purl_list <- list()
page_list <- list()

for (i in 1:data_raw) {
  kodurl <- paste0('https://finance.naver.com/sise/sise_market_sum.nhn?sosok=1', '&page=', i)
  page_list[[i]] <- kodurl
  table <- read_html(kodurl, encoding='EUC-KR') %>%
    html_table(fill = TRUE)
  table <- table[[2]]
  page_list[[i]] <- table
  Sys.sleep(0.1)
}

kodlist <- rbindlist(page_list)
kodlist <- kodlist %>% select(종목명, 현재가, 전일비, 등락률, 액면가, 시가총액, 상장주식수,외국인비율, 거래량, PER, ROE)
kodlist <- na.omit(kodlist)

#코드 가져오기
kod_codes <- list()

for (i in 1:data_raw) {
  url_kos <- paste0('https://finance.naver.com/sise/sise_market_sum.nhn?sosok=1&page=', i)
  for_code <- GET(url_kos)
  kod_code <- read_html(for_code, encoding = 'EUC-KR') %>%
    html_nodes(.,'tbody') %>%
    html_nodes(., 'td') %>%
    html_nodes(., 'a') %>%
    html_attr(., 'href')
  kod_code <- sapply(kod_code, function(x) {str_sub(x, -6,-1)})
  kod_code <- unique(kod_code)
  kod_codes[[i]] <- kod_code
  Sys.sleep(0.1)
}

kod_codes <- unlist(kod_codes)
kod_codes <- as.data.frame(kod_codes)

kodlist <- cbind(kod_codes, kodlist)

#종목별 시세 리스트 가져오기 2
purl_list2 <- list()
page_list2 <- list()

for (i in 1:data_raw2) {
  kopurl <- paste0('https://finance.naver.com/sise/sise_market_sum.nhn?sosok=0', '&page=', i)
  page_list2[[i]] <- kopurl
  table <- read_html(kopurl, encoding='EUC-KR') %>%
    html_table(fill = TRUE)
  table <- table[[2]]
  page_list2[[i]] <- table
  Sys.sleep(0.1)
}

koplist <- rbindlist(page_list2)
koplist <- koplist %>% select(종목명, 현재가, 전일비, 등락률, 액면가, 시가총액, 상장주식수,외국인비율, 거래량, PER, ROE)
koplist <- na.omit(koplist)

#코드 가져오기
kop_codes <- list()

for (i in 1:data_raw2) {
  url_kosp <- paste0('https://finance.naver.com/sise/sise_market_sum.nhn?sosok=0&page=', i)
  for_code <- GET(url_kosp)
  kop_code <- read_html(for_code, encoding = 'EUC-KR') %>%
    html_nodes(.,'tbody') %>%
    html_nodes(., 'td') %>%
    html_nodes(., 'a') %>%
    html_attr(., 'href')
  kop_code <- sapply(kop_code, function(x) {str_sub(x, -6,-1)})
  kop_code <- unique(kop_code)
  kop_codes[[i]] <- kop_code
  Sys.sleep(0.1)
}

kop_codes <- unlist(kop_codes)
kop_codes <- as.data.frame(kop_codes)

koplist <- cbind(kop_codes, koplist)

colnames(koplist)[1] <- "종목코드"
colnames(kodlist)[1] <- "종목코드"

kr_st <- rbind(koplist,kodlist)

names <- setdiff(colnames(kr_st),c("종목코드", "종목명"))

for (i in names) {
  kr_st[,i] <- kr_st[,i] %>%
    sub(",","", .) %>%
    sub(",","", .) %>%
    sub("%","", .) %>%
    as.numeric()
}

kr_st <- na.omit(kr_st)

#__#개별 종목 작업
## 날짜 자동 업데이트
url_d <- 'https://finance.naver.com/sise/sise_index.naver?code=KOSPI'
biz_day <- GET(url_d) %>%
  read_html(encoding = 'EUC-KR') %>%
  html_nodes(xpath = '//*[@id="time"]') %>%
  html_text() %>%
  str_match(('[0-9]+.[0-9]+.[0-9]+')) %>%
  str_replace_all('\\.', '')

##코스피
#OTP 생성 (Generate.cmd)
otp_gen_url <- 'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'
otp_gen_data <- list(mktId = 'STK',
                     trdDd = biz_day,
                     money = '1',
                     csvxls_isNo = 'false',
                     name = 'fileDown',
                     url = 'dbms/MDC/STAT/standard/MDCSTAT03901')

otp <- POST(otp_gen_url, query = otp_gen_data) %>%
  read_html() %>%
  html_text()
####-> OTP를 html_text로 읽어내기

#OTP로 원하는 데이터 다운로드
down_url <- 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
down_s_KS <- POST(down_url, query = list(code=otp), add_headers(referer=otp_gen_url)) %>%
  read_html(encoding = 'EUC-KR') %>%
  html_text() %>%
  read_csv()

##코스닥
otp_gen_url <- 'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'
otp_gen_data <- list(mktId = 'KSQ',
                     trdDd = biz_day,
                     money = '1',
                     csvxls_isNo = 'false',
                     name = 'fileDown',
                     url = 'dbms/MDC/STAT/standard/MDCSTAT03901')

otp <- POST(otp_gen_url, query = otp_gen_data) %>%
  read_html() %>%
  html_text()
####-> OTP를 html_text로 읽어내기


#OTP로 원하는 데이터 다운로드
down_url <- 'http://data.krx.co.kr/comm/fileDn/download_csv/download.cmd'
down_s_KQ <- POST(down_url, query = list(code=otp), add_headers(referer=otp_gen_url)) %>%
  read_html(encoding = 'EUC-KR') %>%
  html_text() %>%
  read_csv()

down_sector <- rbind(down_s_KQ, down_s_KS)

##개별 종목 읽어내기
otp_gen_url <- 'http://data.krx.co.kr/comm/fileDn/GenerateOTP/generate.cmd'
otp_gen_data <- list(searchType = '1',
                     mktId = 'ALL',
                     trdDd = biz_day,
                     money = '1',
                     csvxls_isNo = 'false',
                     name = 'fileDown',
                     url = 'dbms/MDC/STAT/standard/MDCSTAT03501')

otp <- POST(otp_gen_url, query = otp_gen_data) %>%
  read_html() %>%
  html_text()

down_ind = POST(down_url, query = list(code = otp),
                add_headers(referer = otp_gen_url)) %>%
  read_html(encoding = 'EUC-KR') %>%
  html_text() %>%
  read_csv()

KOR_ticker = merge(down_sector, down_ind, by = intersect(names(down_sector),
                                                         names(down_ind)),
                   all = FALSE)
save(KOR_ticker, file = "./Korea_Stock.rdata")
write.csv(KOR_ticker,file="./Korea_stock_recent.csv",fileEncoding ='euc-kr')

### 주가 읽어내기
price_reading <- function() {
from <- readline("시작날짜(형식: 20220720) : ")
to <- readline("마지막날짜(형식: 20220720) : ")
name_insert <- readline("종목명 : ")
time_frame <- readline("시간 단위 (day,week,month 중 택1) : ")

name <- KOR_ticker[KOR_ticker$종목명==name_insert,1]

url_price <- paste0('https://api.finance.naver.com/siseJson.naver?symbol=',name,'&requestType=1&startTime=',from,'&endTime=',to,'&timeframe=',time_frame)

price_data <- GET(url_price)
price_data_html <- price_data %>% read_html %>%
  html_text() %>%
  read_csv()

price <- price_data_html[c(1,5,6)]
colnames(price) = (c('Date','Price', 'Volume'))
price = na.omit(price)
price$Date = parse_number(price$Date)
price$Date = ymd(price$Date)
price$Volume = as.numeric(price$Volume)

par(mfrow = c(2,1))

p1 <- ggplot(data = price,mapping = aes(x=Date, y=Price)) + geom_line() + ggtitle(name_insert) + theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data= price, mapping = aes(x=Date, y=Volume/100000)) + geom_bar(stat='identity')

grid.arrange(p1,p2,nrow=2)
}

### 재무제표 읽어내기
finance_data <- function() {
  firm_co <- readline("기업명 : ")
firm_code <- KOR_corlist[KOR_corlist$종목명==firm_co,c('종목코드')][1]

firm_url <- paste0("https://comp.fnguide.com/SVO2/asp/SVD_Finance.asp?pGB=1&gicode=A",firm_code)

firm_data <- GET(firm_url, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64)
                      AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'))
firm_data <- firm_data %>%
  read_html() %>%
  html_table()

##각 재무제표 초본
data_IS <- firm_data[[1]] %>%
  as.data.frame()
data_IS[, 1] = gsub('계산에 참여한 계정 펼치기',
                    '', data_IS[, 1])
data_IS = data_IS[!duplicated(data_IS[, 1]), ]
rownames(data_IS) = NULL
rownames(data_IS) = data_IS[, 1]
data_IS[, 1] = NULL
data_IS <- data_IS[,1:4]
data_IS = sapply(data_IS, function(x) {
  str_replace_all(x, ',', '') %>%
    as.numeric()
}) %>%
  data.frame(., row.names = rownames(data_IS))


data_BS <- firm_data[[3]] %>%
  as.data.frame()
data_BS[, 1] = gsub('계산에 참여한 계정 펼치기',
                    '', data_BS[, 1])
data_BS = data_BS[!duplicated(data_BS[, 1]), ]
rownames(data_BS) = NULL
rownames(data_BS) = data_BS[, 1]
data_BS[, 1] = NULL
data_BS <- data_BS[,1:4]
data_BS = sapply(data_BS, function(x) {
  str_replace_all(x, ',', '') %>%
    as.numeric()
}) %>%
  data.frame(., row.names = rownames(data_BS))

data_CF <- firm_data[[5]] %>%
  as.data.frame()
data_CF[, 1] = gsub('계산에 참여한 계정 펼치기',
                    '', data_CF[, 1])
data_CF = data_CF[!duplicated(data_CF[, 1]), ]
rownames(data_CF) = NULL
rownames(data_CF) = data_CF[, 1]
data_CF[, 1] = NULL
data_CF <- data_CF[,1:4]
data_CF = sapply(data_CF, function(x) {
  str_replace_all(x, ',', '') %>%
    as.numeric()
}) %>%
  data.frame(., row.names = rownames(data_CF))


##손익계산서 현금흐름표 연환산
data_IS2 <- firm_data[[2]] %>%
  as.data.frame()
data_IS2[, 1] = gsub('계산에 참여한 계정 펼치기',
                    '', data_IS2[, 1])
data_IS2 = data_IS2[!duplicated(data_IS2[, 1]), ]
rownames(data_IS2) = NULL
rownames(data_IS2) = data_IS2[, 1]
data_IS2[, 1] = NULL
data_IS2 = sapply(data_IS2, function(x) {
  str_replace_all(x, ',', '') %>%
    as.numeric()
}) %>%
  data.frame(., row.names = rownames(data_IS2))
data_IS2[,7] <- data_IS2[,1] + data_IS2[,2] + data_IS2[,3] + data_IS2[,4]
colnames(data_IS2)[7] <- colnames(data_IS2)[4]

data_IS[,4] <- data_IS2[,7]
data_IS <- na.omit(data_IS)

#
data_CF2 <- firm_data[[6]] %>%
  as.data.frame()
data_CF2[, 1] = gsub('계산에 참여한 계정 펼치기',
                     '', data_CF2[, 1])
data_CF2 = data_CF2[!duplicated(data_CF2[, 1]), ]
rownames(data_CF2) = NULL
rownames(data_CF2) = data_CF2[, 1]
data_CF2[, 1] = NULL
data_CF2 = sapply(data_CF2, function(x) {
  str_replace_all(x, ',', '') %>%
    as.numeric()
}) %>%
  data.frame(., row.names = rownames(data_CF2))
data_CF2[,5] <- data_CF2[,1] + data_CF2[,2] + data_CF2[,3] + data_CF2[,4]
colnames(data_CF2)[5] <- colnames(data_CF2)[4]

data_CF[,4] <- data_CF2[,5]
data_CF <- na.omit(data_CF)

View(data_IS)
View(data_BS)
View(data_CF)
}

#------------
#22년 2분기 재무제표 저장하기
finance_all <- list()

for (i in 1:nrow(kr_st)) {
  tryCatch({
  firm_code <- kr_st[i,'종목코드']
  
  firm_url <- paste0("https://comp.fnguide.com/SVO2/asp/SVD_Finance.asp?pGB=1&gicode=A",firm_code)
  
  firm_data <- GET(firm_url, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64)
                      AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'))
  
  firm_data <- firm_data %>%
    read_html() %>%
    html_table()
  
  ##각 재무제표 초본
  data_IS <- firm_data[[1]] %>%
    as.data.frame()
  data_IS[, 1] = gsub('계산에 참여한 계정 펼치기',
                      '', data_IS[, 1])
  data_IS = data_IS[!duplicated(data_IS[, 1]), ]
  rownames(data_IS) = NULL
  rownames(data_IS) = data_IS[, 1]
  data_IS[, 1] = NULL
  data_IS <- data_IS[,1:4]
  data_IS = sapply(data_IS, function(x) {
    str_replace_all(x, ',', '') %>%
      as.numeric()
  }) %>%
    data.frame(., row.names = rownames(data_IS))
  
  
  data_BS <- firm_data[[3]] %>%
    as.data.frame()
  data_BS[, 1] = gsub('계산에 참여한 계정 펼치기',
                      '', data_BS[, 1])
  data_BS = data_BS[!duplicated(data_BS[, 1]), ]
  rownames(data_BS) = NULL
  rownames(data_BS) = data_BS[, 1]
  data_BS[, 1] = NULL
  data_BS <- data_BS[,1:4]
  data_BS = sapply(data_BS, function(x) {
    str_replace_all(x, ',', '') %>%
      as.numeric()
  }) %>%
    data.frame(., row.names = rownames(data_BS))
  
  data_CF <- firm_data[[5]] %>%
    as.data.frame()
  data_CF[, 1] = gsub('계산에 참여한 계정 펼치기',
                      '', data_CF[, 1])
  data_CF = data_CF[!duplicated(data_CF[, 1]), ]
  rownames(data_CF) = NULL
  rownames(data_CF) = data_CF[, 1]
  data_CF[, 1] = NULL
  data_CF <- data_CF[,1:4]
  data_CF = sapply(data_CF, function(x) {
    str_replace_all(x, ',', '') %>%
      as.numeric()
  }) %>%
    data.frame(., row.names = rownames(data_CF))
  
  
  ##손익계산서 현금흐름표 연환산
  data_IS2 <- firm_data[[2]] %>%
    as.data.frame()
  data_IS2[, 1] = gsub('계산에 참여한 계정 펼치기',
                       '', data_IS2[, 1])
  data_IS2 = data_IS2[!duplicated(data_IS2[, 1]), ]
  rownames(data_IS2) = NULL
  rownames(data_IS2) = data_IS2[, 1]
  data_IS2[, 1] = NULL
  data_IS2 = sapply(data_IS2, function(x) {
    str_replace_all(x, ',', '') %>%
      as.numeric()
  }) %>%
    data.frame(., row.names = rownames(data_IS2))
  data_IS2[,7] <- data_IS2[,1] + data_IS2[,2] + data_IS2[,3] + data_IS2[,4]
  colnames(data_IS2)[7] <- colnames(data_IS2)[4]
  
  data_IS[,4] <- data_IS2[,7]
  
  #
  data_CF2 <- firm_data[[6]] %>%
    as.data.frame()
  data_CF2[, 1] = gsub('계산에 참여한 계정 펼치기',
                       '', data_CF2[, 1])
  data_CF2 = data_CF2[!duplicated(data_CF2[, 1]), ]
  rownames(data_CF2) = NULL
  rownames(data_CF2) = data_CF2[, 1]
  data_CF2[, 1] = NULL
  data_CF2 = sapply(data_CF2, function(x) {
    str_replace_all(x, ',', '') %>%
      as.numeric()
  }) %>%
    data.frame(., row.names = rownames(data_CF2))
  data_CF2[,5] <- data_CF2[,1] + data_CF2[,2] + data_CF2[,3] + data_CF2[,4]
  colnames(data_CF2)[5] <- colnames(data_CF2)[4]
  
  data_CF[,4] <- data_CF2[,5]
  
  data_finance <- rbind(data_IS, data_CF, data_BS)
  }, error = function(e) {
    data_finance <<- NA
    warning(paste0("Error in Ticker :", kr_st$종목명[i]))})
  write.csv(data_finance, paste0('./2022 2/', kr_st$종목명[i],'.csv'), fileEncoding = 'euc-kr')
  Sys.sleep(.1)
}


fi_data_all <- list()


##재무제표 항목별로 묶어 저장하기 -> 재무비율 계산 + 걸러내는 시스템
for (i in 1:nrow(kr_st)) {
  tryCatch({
  name = kr_st$종목명[i]
  x <- read.csv(paste0('./2022 2/', name, '.csv'), row.names = 1, fileEncoding = "euc-kr")
  }, error=function(e) {x <<- NA})
  fi_data_all[[name]] <- x
}

fs_item = fi_data_all[[1]] %>% rownames()

fs_list <- list()

for (i in 1:length(fs_item)) {
select_fs <- lapply(fi_data_all, function(x) {if(fs_item[i] %in% rownames(x))
  {x[which(rownames(x)==fs_item[i]),]}
  else { data.frame(NA) }})

select_fs <- bind_rows(select_fs)

select_fs <- select_fs[,1:4]
rownames(select_fs) <- kr_st[,'종목명']

fs_list[[fs_item[i]]] <- select_fs
}

###재무제표 조직화
## 건전성 필터
Liq <- fs_list[["유동자산"]]/fs_list[["유동부채"]]
SafeMar <- fs_list[["유동자산"]] - fs_list[["유동부채"]]
Lemonfirm <- 100*fs_list[["이익잉여금(결손금)"]]/fs_list[["자본"]]
Goodd <- fs_list[["장기차입금"]]/fs_list[["부채"]]

##성장성
ROE_data <- 100*fs_list[["당기순이익"]]/fs_list[["자본"]]
Invst <- -100*fs_list[["투자활동으로인한현금흐름"]]/fs_list[["자본"]]


###UPM 종목군 시뮬레이션
upm_codes <- read.csv("./upmcodes.csv",fileEncoding = "euc-kr")

upm_codes$'종목코드' = str_pad(upm_codes$'종목코드', 6, side = c('left'), pad = '0')

Lemonfirm_upm <- Lemonfirm[upm_firm,]
SafeMar_upm <- SafeMar[upm_firm,]
Goodd_upm <- Goodd[upm_firm,]

View(upm_codes)

write.csv(Lemonfirm_upm, "./UPM 종목 이익잉여금-자본 비율.csv", fileEncoding = "euc-kr")
write.csv(SafeMar_upm, "./UPM 종목 안전마진.csv", fileEncoding = "euc-kr")
write.csv(Goodd_upm, "./UPM 종목 장기차입금-부채 비율.csv", fileEncoding = "euc-kr")

#-------------섹터 지수화 작업

upm_sectors <- unique(upm_codes$섹터)
upm_sector_codes <- list()

for (i in upm_sectors) {
  upmcodes_sector <- data.frame(upm_codes[upm_codes$섹터==i,])
  upm_sector_codes[[i]] <- upmcodes_sector
}

