library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(rjson)
library(RJSONIO)
library(leaflet)
library(ggplot2)
library(spatstat)
library(rgdal)
library(quantmod)
library(urca)
library(rvest)
library(plumber)
library(rtweet)
library(RestRserve)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)
library(magrittr)
library(car)
library(readxl)
library(moments)
library(lmtest)
library(vars)
library(forecast)
library(tseries)
library(devtools)
library(FinancialInstrument)
library(PerformanceAnalytics)
KIS_hash <- POST(url = paste0(url_base, "/uapi/hashkey"),
body = toJSON(list("CANO" = "63561815", "ACTN_PRDP_CD" = "21", "OVRS_EXCG_CD" = "SHAA"), auto_unbox = TRUE),
add_headers(.headers = c('content-Type' = 'application_json','appKey' = App_key, 'appSecret' = App_Secret)))
hashkey = KIS_hash %>% read_html() %>% html_text() %>% fromJSON() %>% .$HASH
KIS_key <- POST(url = paste0(url_base,"/oauth2/tokenP"),
body = paste0('{"grant_type" : "client_credentials","appkey" : "', App_key,'", "appsecret" : "', App_Secret, '"}'))
access_key = KIS_key %>% read_html() %>% html_text() %>% fromJSON() %>% .$access_token
i=0
###
제약_today <- c()
for(j in codes) {
price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
pt1 <- t(pt1)
pt1 <- as.data.frame(pt1)
제약_today[i] <- pt1$hts_avls
i <- i+1
}
sum(as.numeric(제약_today))
제약_today <- sum(as.numeric(제약_today))
제약
제약 <- rbind(제약, "2022.09.26" = 제약_today)
제약
제약 <- rbind("2022.09.28" = 제약_today, 제약)
제약
제약_ra <- (제약[1,1] - 제약[2,1])/제약[2,1]
제약_ra
제약[1,1] - 제약[2,1]
제약[2,1]
제약[1,1]
제약_ra <- (제약[1,1]*(10^8) - 제약[2,1])/제약[2,1]
제약_ra
View(upm_sector_codes)
length(upm_sector_codes)
sector_updown <- c()
for (k in 1:length(upm_sector_codes)) {
codes <- upm_sector_codes[[k]]$종목코드
pricee_e <- list()
for (j in codes) {
url_price_e <- paste0("https://finance.naver.com/item/frgn.naver?code=", j, "&page=1")
price_data_prac_e <- GET(url_price_e, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))
price_data_p_e <- price_data_prac_e %>% read_html(encoding = 'EUC-KR') %>%
html_table() %>%
.[[3]] %>%
as.data.frame() %>%
.[c(3:7,11:15,19:23,27:31),]
price_data_p_e[,9] <- as.numeric(str_replace_all(price_data_p_e[,9], "%",""))
price_data_p_e[,2] <- as.numeric(str_replace_all(price_data_p_e[,2], ",",""))
price_data_p_e[,8] <- as.numeric(str_replace_all(price_data_p_e[,8], ",",""))
options("scipen" = 100)
cap_e <- (100/price_data_p_e[,9]) * price_data_p_e[,2] * price_data_p_e[,8]
pricee__1_e <- as.data.frame(cbind("일자" = price_data_p_e$날짜,"종가" = price_data_p_e$종가,"시가총액" = as.numeric(cap_e)))
pricee_e[[j]] <- pricee__1_e
}
ra__ <- rep(0, 20)
ra_today <- c()
i=0
for(j in codes) {
price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
pt1 <- t(pt1)
pt1 <- as.data.frame(pt1)
ra_today[i] <- pt1$hts_avls
i <- i+1
}
ra_today <- sum(as.numeric(ra_today))
for (i in 1:length(pricee_e)) {
ra__ <- ra__ + as.numeric(pricee_e[[i]]$시가총액)
ra__ <- cbind("지수화" = ra__)
ra__ <- as.data.frame(ra__)
row.names(ra__) <- pricee_e[[i]]$일자}
ra__ <- rbind("2022.09.28" = ra_today, ra__)
ra__ra <- (ra__[1,1]*(10^8) - ra__[2,1])/ra__[2,1]
}
sector_updown <- c()
for (k in 1:length(upm_sector_codes)) {
codes <- upm_sector_codes[[k]]$종목코드
pricee_e <- list()
for (j in codes) {
url_price_e <- paste0("https://finance.naver.com/item/frgn.naver?code=", j, "&page=1")
price_data_prac_e <- GET(url_price_e, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))
price_data_p_e <- price_data_prac_e %>% read_html(encoding = 'EUC-KR') %>%
html_table() %>%
.[[3]] %>%
as.data.frame() %>%
.[c(3:7,11:15,19:23,27:31),]
price_data_p_e[,9] <- as.numeric(str_replace_all(price_data_p_e[,9], "%",""))
price_data_p_e[,2] <- as.numeric(str_replace_all(price_data_p_e[,2], ",",""))
price_data_p_e[,8] <- as.numeric(str_replace_all(price_data_p_e[,8], ",",""))
options("scipen" = 100)
cap_e <- (100/price_data_p_e[,9]) * price_data_p_e[,2] * price_data_p_e[,8]
pricee__1_e <- as.data.frame(cbind("일자" = price_data_p_e$날짜,"종가" = price_data_p_e$종가,"시가총액" = as.numeric(cap_e)))
pricee_e[[j]] <- pricee__1_e
}
ra__ <- rep(0, 20)
ra_today <- c()
i=0
for(j in codes) {
price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
pt1 <- t(pt1)
pt1 <- as.data.frame(pt1)
ra_today[i] <- pt1$hts_avls
i <- i+1
}
ra_today <- sum(as.numeric(ra_today))
for (i in 1:length(pricee_e)) {
ra__ <- ra__ + as.numeric(pricee_e[[i]]$시가총액)
ra__ <- cbind("지수화" = ra__)
ra__ <- as.data.frame(ra__)
row.names(ra__) <- pricee_e[[i]]$일자}
ra__ <- rbind("2022.09.28" = ra_today, ra__)
ra__ra <- (ra__[1,1]*(10^8) - ra__[2,1])/ra__[2,1]
sector_updown[k] <- ra__ra
}
sector_updown
names(upm_sector_codes)
names(upm_sector_codes)[1:8]
updown <- cbind(names(upm_sector_codes)[1:8], UpDown = sector_updown)
updown
updown <- cbind(Sector = names(upm_sector_codes)[1:8], UpDown = sector_updown)
ggplot(data=updown) +
geom_histogram(mapping(UpDown ~ Sector))
ggplot(data=updown) +
geom_histogram(mapping(UpDown, Sector))
ggplot(data=updown) +
geom_histogram(mapping(y = UpDown, x = Sector))
updown <- as.data.frame(cbind(Sector = names(upm_sector_codes)[1:8], UpDown = sector_updown))
ggplot(data=updown) +
geom_histogram(mapping(y = UpDown, x = Sector))
ggplot(data=updown) +
geom_histogram(mapping = aes(y = UpDown, x = Sector))
ggplot(data=updown) +
geom_histogram(mapping = aes(x = UpDown, y = Sector))
hist(updown)
hist(updown$UpDown)
updown <- as.data.frame(cbind(Sector = names(upm_sector_codes)[1:8], UpDown = as.numeric(sector_updown)))
ggplot(data=updown) +
geom_histogram(mapping = aes(x = UpDown, y = Sector))
hist(updown$UpDown)
class(UpDown)
class(updown$UpDown)
updown$UpDown <- as.numeric(updown$UpDown)
ggplot(data=updown) +
geom_histogram(mapping = aes(x = UpDown, y = Sector))
hist(updown$UpDown)
View(updown)
ggplot(data=updown) +
geom_bar(mapping = aes(x = UpDown, y = Sector))
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
require(RODBC)
library(curl)
require(RMySQL)
library(XML)
library(xml2)
library(rstudioapi)
library(httr)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(rjson)
library(RJSONIO)
library(leaflet)
library(ggplot2)
library(spatstat)
library(rgdal)
library(quantmod)
library(urca)
library(rvest)
library(plumber)
library(rtweet)
library(RestRserve)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)
library(magrittr)
library(car)
library(readxl)
library(moments)
library(lmtest)
library(vars)
library(forecast)
library(tseries)
library(devtools)
library(FinancialInstrument)
library(PerformanceAnalytics)
ggplot(data=updown) +
geom_bar(mapping = aes(x = UpDown, y = Sector))
updown
ggplot(data=updown) +
geom_bar(mapping = aes(y = UpDown, x = Sector))
ggplot(data=updown) +
geom_bar(aes(x = Sector), stat="count")
ggplot(data=updown) +
geom_bar(aes(x = Sector), stat="UpDown")
ggplot(data=updown) +
geom_bar(aes(x = Sector), stat=UpDown)
ggplot(data=updown) +
geom_bar(aes(x = Sector), UpDown)
ggplot(data=updown) +
geom_bar(aes(x = Sector,UpDown))
ggplot(data=updown) +
geom_bar(aes(Sector,UpDown))
ggplot(data=updown) +
geom_bar(aes(x=Sector,y=UpDown))
ggplot(data=updown) +
geom_bar(aes(UpDown))
ggplot(data=updown) +
geom_bar(aes(Sector))
sector_updown <- c()
for (k in 1:length(upm_sector_codes)) {
codes <- upm_sector_codes[[k]]$종목코드
pricee_e <- list()
for (j in codes) {
url_price_e <- paste0("https://finance.naver.com/item/frgn.naver?code=", j, "&page=1")
price_data_prac_e <- GET(url_price_e, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))
price_data_p_e <- price_data_prac_e %>% read_html(encoding = 'EUC-KR') %>%
html_table() %>%
.[[3]] %>%
as.data.frame() %>%
.[c(3:7,11:15,19:23,27:31),]
price_data_p_e[,9] <- as.numeric(str_replace_all(price_data_p_e[,9], "%",""))
price_data_p_e[,2] <- as.numeric(str_replace_all(price_data_p_e[,2], ",",""))
price_data_p_e[,8] <- as.numeric(str_replace_all(price_data_p_e[,8], ",",""))
options("scipen" = 100)
cap_e <- (100/price_data_p_e[,9]) * price_data_p_e[,2] * price_data_p_e[,8]
pricee__1_e <- as.data.frame(cbind("일자" = price_data_p_e$날짜,"종가" = price_data_p_e$종가,"시가총액" = as.numeric(cap_e)))
pricee_e[[j]] <- pricee__1_e
}
ra__ <- rep(0, 20)
ra_today <- c()
i=0
for(j in codes) {
price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
pt1 <- t(pt1)
pt1 <- as.data.frame(pt1)
ra_today[i] <- pt1$hts_avls
i <- i+1
}
ra_today <- sum(as.numeric(ra_today))
for (i in 1:length(pricee_e)) {
ra__ <- ra__ + as.numeric(pricee_e[[i]]$시가총액)
ra__ <- cbind("지수화" = ra__)
ra__ <- as.data.frame(ra__)
row.names(ra__) <- pricee_e[[i]]$일자}
ra__ <- rbind("2022.09.28" = ra_today, ra__)
ra__ra <- (ra__[1,1]*(10^8) - ra__[2,1])/ra__[2,1]
sector_updown[k] <- ra__ra
}
sector_updown
sector_updown
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
require(RODBC)
library(curl)
require(RMySQL)
library(XML)
library(xml2)
library(rstudioapi)
library(httr)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(rjson)
library(RJSONIO)
library(leaflet)
library(ggplot2)
library(spatstat)
library(rgdal)
library(quantmod)
library(urca)
library(rvest)
library(plumber)
library(rtweet)
library(RestRserve)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)
library(magrittr)
library(car)
library(readxl)
library(moments)
library(lmtest)
library(vars)
library(forecast)
library(tseries)
library(devtools)
library(FinancialInstrument)
library(PerformanceAnalytics)
ggplot(data=updown) +
geom_bar(aes(x=Sector,y=UpDown), stat = 'identity')
ggplot(data=updown) +
geom_bar(aes(x=Sector,y=UpDown), stat = 'identity') +
xlab("") +
ylab("")
sector_updown <- c()
for (k in 1:length(upm_sector_codes)) {
codes <- upm_sector_codes[[k]]$종목코드
pricee_e <- list()
for (j in codes) {
url_price_e <- paste0("https://finance.naver.com/item/frgn.naver?code=", j, "&page=1")
price_data_prac_e <- GET(url_price_e, user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'))
price_data_p_e <- price_data_prac_e %>% read_html(encoding = 'EUC-KR') %>%
html_table() %>%
.[[3]] %>%
as.data.frame() %>%
.[c(3:7,11:15,19:23,27:31),]
price_data_p_e[,9] <- as.numeric(str_replace_all(price_data_p_e[,9], "%",""))
price_data_p_e[,2] <- as.numeric(str_replace_all(price_data_p_e[,2], ",",""))
price_data_p_e[,8] <- as.numeric(str_replace_all(price_data_p_e[,8], ",",""))
options("scipen" = 100)
cap_e <- (100/price_data_p_e[,9]) * price_data_p_e[,2] * price_data_p_e[,8]
pricee__1_e <- as.data.frame(cbind("일자" = price_data_p_e$날짜,"종가" = price_data_p_e$종가,"시가총액" = as.numeric(cap_e)))
pricee_e[[j]] <- pricee__1_e
}
ra__ <- rep(0, 20)
ra_today <- c()
i=0
for(j in codes) {
price_test <- GET(url = paste0(url_base,"/uapi/domestic-stock/v1/quotations/inquire-price"),
query = list("FID_COND_MRKT_DIV_CODE" = "J", "FID_INPUT_ISCD" = j),
add_headers(.headers = c("Content-type" = "application/json","authorization" = paste("Bearer", access_key), "appKey" = App_key, "appSecret" = App_Secret, "tr_id"="FHKST01010100")))
pt1 <- price_test %>% read_html() %>% html_text() %>% fromJSON() %>% .$output %>% as.list() %>% do.call(rbind, .)
pt1 <- t(pt1)
pt1 <- as.data.frame(pt1)
ra_today[i] <- pt1$hts_avls
i <- i+1
}
ra_today <- sum(as.numeric(ra_today))
for (i in 1:length(pricee_e)) {
ra__ <- ra__ + as.numeric(pricee_e[[i]]$시가총액)
ra__ <- cbind("지수화" = ra__)
ra__ <- as.data.frame(ra__)
row.names(ra__) <- pricee_e[[i]]$일자}
ra__ <- rbind("Present Index" = ra_today, ra__)
ra__ra <- (ra__[1,1]*(10^8) - ra__[2,1])/ra__[2,1]
sector_updown[k] <- ra__ra
}
ggplot(data=updown) +
geom_bar(aes(x=Sector,y=UpDown), stat = 'identity') +
xlab("") +
ylab("")
updown
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
require(RODBC)
library(curl)
require(RMySQL)
library(XML)
library(xml2)
library(rstudioapi)
library(httr)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(rjson)
library(RJSONIO)
library(leaflet)
library(ggplot2)
library(spatstat)
library(rgdal)
library(quantmod)
library(urca)
library(rvest)
library(plumber)
library(rtweet)
library(RestRserve)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)
library(magrittr)
library(car)
library(readxl)
library(moments)
library(lmtest)
library(vars)
library(forecast)
library(tseries)
library(devtools)
library(FinancialInstrument)
library(PerformanceAnalytics)
library(shiny)
