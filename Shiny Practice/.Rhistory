library(shiny)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
require(RODBC)
library(curl)
require(RMySQL)
library(XML)
library(xml2)
library(rstudioapi)
library(httr)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(rjson)
library(RJSONIO)
library(leaflet)
library(ggplot2)
library(spatstat)
library(rgdal)
library(quantmod)
library(urca)
library(rvest)
library(plumber)
library(rtweet)
library(RestRserve)
library(rvest)
library(httr)
library(data.table)
library(dplyr)
library(stringr)
library(readr)
library(xts)
library(lubridate)
library(timetk)
library(ggplot2)
library(gridExtra)
library(jsonlite)
library(xml2)
library(dygraphs)
library(rjson)
library(magrittr)
library(car)
library(readxl)
library(moments)
library(lmtest)
library(vars)
library(forecast)
library(tseries)
library(devtools)
library(FinancialInstrument)
library(PerformanceAnalytics)
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
